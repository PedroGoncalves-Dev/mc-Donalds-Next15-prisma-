// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String   @id @default(uuid())
  name           String
  slug           String
  description    String
  avatarImageUrl String
  coverImageUrl  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // relação
  menuCategories MenuCategory[]
  products       Product[]
  orders         Order[]
}

model MenuCategory {
  id           String   @id @default(uuid())
  name         String
  restaurantId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relação
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  products   Product[]
}

model Product {
  id             String   @id @default(uuid())
  name           String
  description    String
  price          Float
  ingredients    String
  imageUrl       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  menuCategoryId String
  restaurantId   String

  // relação
  menuCategory  MenuCategory   @relation(fields: [menuCategoryId], references: [id])
  restaurant    Restaurant     @relation(fields: [restaurantId], references: [id])
  orderProducts OrderProduct[]
}

model Order {
  id               Int              @id @default(autoincrement())
  total            Float
  status           OrderStatus
  consuptionMethod ConsuptionMethod
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  restaurantId     String

  // relação
  orderProducts OrderProduct[]

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
}

model OrderProduct {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  orderId   Int

  // relação
  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum ConsuptionMethod {
  TAKEAWAY
  DINE_IN
}
